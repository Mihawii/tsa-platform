/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/lop";
exports.ids = ["vendor-chunks/lop"];
exports.modules = {

/***/ "(ssr)/./node_modules/lop/index.js":
/*!***********************************!*\
  !*** ./node_modules/lop/index.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("exports.Parser = __webpack_require__(/*! ./lib/parser */ \"(ssr)/./node_modules/lop/lib/parser.js\").Parser;\nexports.rules = __webpack_require__(/*! ./lib/rules */ \"(ssr)/./node_modules/lop/lib/rules.js\");\nexports.errors = __webpack_require__(/*! ./lib/errors */ \"(ssr)/./node_modules/lop/lib/errors.js\");\nexports.results = __webpack_require__(/*! ./lib/parsing-results */ \"(ssr)/./node_modules/lop/lib/parsing-results.js\");\nexports.StringSource = __webpack_require__(/*! ./lib/StringSource */ \"(ssr)/./node_modules/lop/lib/StringSource.js\");\nexports.Token = __webpack_require__(/*! ./lib/Token */ \"(ssr)/./node_modules/lop/lib/Token.js\");\nexports.bottomUp = __webpack_require__(/*! ./lib/bottom-up */ \"(ssr)/./node_modules/lop/lib/bottom-up.js\");\nexports.RegexTokeniser = __webpack_require__(/*! ./lib/regex-tokeniser */ \"(ssr)/./node_modules/lop/lib/regex-tokeniser.js\").RegexTokeniser;\nexports.rule = function(ruleBuilder) {\n    var rule;\n    return function(input) {\n        if (!rule) {\n            rule = ruleBuilder();\n        }\n        return rule(input);\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbG9wL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBQSx5R0FBK0M7QUFDL0NBLCtGQUFzQztBQUN0Q0Esa0dBQXdDO0FBQ3hDQSxxSEFBa0Q7QUFDbERBLG9IQUFvRDtBQUNwREEsK0ZBQXNDO0FBQ3RDQSwwR0FBNkM7QUFDN0NBLDJJQUF3RTtBQUV4RUEsWUFBWSxHQUFHLFNBQVNXLFdBQVc7SUFDL0IsSUFBSUQ7SUFDSixPQUFPLFNBQVNFLEtBQUs7UUFDakIsSUFBSSxDQUFDRixNQUFNO1lBQ1BBLE9BQU9DO1FBQ1g7UUFDQSxPQUFPRCxLQUFLRTtJQUNoQjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdHNhLXBsYXRmb3JtLy4vbm9kZV9tb2R1bGVzL2xvcC9pbmRleC5qcz8wMGFmIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMuUGFyc2VyID0gcmVxdWlyZShcIi4vbGliL3BhcnNlclwiKS5QYXJzZXI7XG5leHBvcnRzLnJ1bGVzID0gcmVxdWlyZShcIi4vbGliL3J1bGVzXCIpO1xuZXhwb3J0cy5lcnJvcnMgPSByZXF1aXJlKFwiLi9saWIvZXJyb3JzXCIpO1xuZXhwb3J0cy5yZXN1bHRzID0gcmVxdWlyZShcIi4vbGliL3BhcnNpbmctcmVzdWx0c1wiKTtcbmV4cG9ydHMuU3RyaW5nU291cmNlID0gcmVxdWlyZShcIi4vbGliL1N0cmluZ1NvdXJjZVwiKTtcbmV4cG9ydHMuVG9rZW4gPSByZXF1aXJlKFwiLi9saWIvVG9rZW5cIik7XG5leHBvcnRzLmJvdHRvbVVwID0gcmVxdWlyZShcIi4vbGliL2JvdHRvbS11cFwiKTtcbmV4cG9ydHMuUmVnZXhUb2tlbmlzZXIgPSByZXF1aXJlKFwiLi9saWIvcmVnZXgtdG9rZW5pc2VyXCIpLlJlZ2V4VG9rZW5pc2VyO1xuXG5leHBvcnRzLnJ1bGUgPSBmdW5jdGlvbihydWxlQnVpbGRlcikge1xuICAgIHZhciBydWxlO1xuICAgIHJldHVybiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICBpZiAoIXJ1bGUpIHtcbiAgICAgICAgICAgIHJ1bGUgPSBydWxlQnVpbGRlcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBydWxlKGlucHV0KTtcbiAgICB9O1xufTtcbiJdLCJuYW1lcyI6WyJleHBvcnRzIiwiUGFyc2VyIiwicmVxdWlyZSIsInJ1bGVzIiwiZXJyb3JzIiwicmVzdWx0cyIsIlN0cmluZ1NvdXJjZSIsIlRva2VuIiwiYm90dG9tVXAiLCJSZWdleFRva2VuaXNlciIsInJ1bGUiLCJydWxlQnVpbGRlciIsImlucHV0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lop/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/lop/lib/StringSource.js":
/*!**********************************************!*\
  !*** ./node_modules/lop/lib/StringSource.js ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
eval("\nvar StringSource = module.exports = function(string, description) {\n    var self = {\n        asString: function() {\n            return string;\n        },\n        range: function(startIndex, endIndex) {\n            return new StringSourceRange(string, description, startIndex, endIndex);\n        }\n    };\n    return self;\n};\nvar StringSourceRange = function(string, description, startIndex, endIndex) {\n    this._string = string;\n    this._description = description;\n    this._startIndex = startIndex;\n    this._endIndex = endIndex;\n};\nStringSourceRange.prototype.to = function(otherRange) {\n    // TODO: Assert that tokens are the same across both iterators\n    return new StringSourceRange(this._string, this._description, this._startIndex, otherRange._endIndex);\n};\nStringSourceRange.prototype.describe = function() {\n    var position = this._position();\n    var description = this._description ? this._description + \"\\n\" : \"\";\n    return description + \"Line number: \" + position.lineNumber + \"\\nCharacter number: \" + position.characterNumber;\n};\nStringSourceRange.prototype.lineNumber = function() {\n    return this._position().lineNumber;\n};\nStringSourceRange.prototype.characterNumber = function() {\n    return this._position().characterNumber;\n};\nStringSourceRange.prototype._position = function() {\n    var self = this;\n    var index = 0;\n    var nextNewLine = function() {\n        return self._string.indexOf(\"\\n\", index);\n    };\n    var lineNumber = 1;\n    while(nextNewLine() !== -1 && nextNewLine() < this._startIndex){\n        index = nextNewLine() + 1;\n        lineNumber += 1;\n    }\n    var characterNumber = this._startIndex - index + 1;\n    return {\n        lineNumber: lineNumber,\n        characterNumber: characterNumber\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbG9wL2xpYi9TdHJpbmdTb3VyY2UuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLGVBQWVDLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxNQUFNLEVBQUVDLFdBQVc7SUFDNUQsSUFBSUMsT0FBTztRQUNQQyxVQUFVO1lBQ04sT0FBT0g7UUFDWDtRQUNBSSxPQUFPLFNBQVNDLFVBQVUsRUFBRUMsUUFBUTtZQUNoQyxPQUFPLElBQUlDLGtCQUFrQlAsUUFBUUMsYUFBYUksWUFBWUM7UUFDbEU7SUFDSjtJQUNBLE9BQU9KO0FBQ1g7QUFFQSxJQUFJSyxvQkFBb0IsU0FBU1AsTUFBTSxFQUFFQyxXQUFXLEVBQUVJLFVBQVUsRUFBRUMsUUFBUTtJQUN0RSxJQUFJLENBQUNFLE9BQU8sR0FBR1I7SUFDZixJQUFJLENBQUNTLFlBQVksR0FBR1I7SUFDcEIsSUFBSSxDQUFDUyxXQUFXLEdBQUdMO0lBQ25CLElBQUksQ0FBQ00sU0FBUyxHQUFHTDtBQUNyQjtBQUVBQyxrQkFBa0JLLFNBQVMsQ0FBQ0MsRUFBRSxHQUFHLFNBQVNDLFVBQVU7SUFDaEQsOERBQThEO0lBQzlELE9BQU8sSUFBSVAsa0JBQWtCLElBQUksQ0FBQ0MsT0FBTyxFQUFFLElBQUksQ0FBQ0MsWUFBWSxFQUFFLElBQUksQ0FBQ0MsV0FBVyxFQUFFSSxXQUFXSCxTQUFTO0FBQ3hHO0FBRUFKLGtCQUFrQkssU0FBUyxDQUFDRyxRQUFRLEdBQUc7SUFDbkMsSUFBSUMsV0FBVyxJQUFJLENBQUNDLFNBQVM7SUFDN0IsSUFBSWhCLGNBQWMsSUFBSSxDQUFDUSxZQUFZLEdBQUcsSUFBSSxDQUFDQSxZQUFZLEdBQUcsT0FBTztJQUNqRSxPQUFPUixjQUFjLGtCQUFrQmUsU0FBU0UsVUFBVSxHQUFHLHlCQUF5QkYsU0FBU0csZUFBZTtBQUNsSDtBQUVBWixrQkFBa0JLLFNBQVMsQ0FBQ00sVUFBVSxHQUFHO0lBQ3JDLE9BQU8sSUFBSSxDQUFDRCxTQUFTLEdBQUdDLFVBQVU7QUFDdEM7QUFFQVgsa0JBQWtCSyxTQUFTLENBQUNPLGVBQWUsR0FBRztJQUMxQyxPQUFPLElBQUksQ0FBQ0YsU0FBUyxHQUFHRSxlQUFlO0FBQzNDO0FBRUFaLGtCQUFrQkssU0FBUyxDQUFDSyxTQUFTLEdBQUc7SUFDcEMsSUFBSWYsT0FBTyxJQUFJO0lBQ2YsSUFBSWtCLFFBQVE7SUFDWixJQUFJQyxjQUFjO1FBQ2QsT0FBT25CLEtBQUtNLE9BQU8sQ0FBQ2MsT0FBTyxDQUFDLE1BQU1GO0lBQ3RDO0lBRUEsSUFBSUYsYUFBYTtJQUNqQixNQUFPRyxrQkFBa0IsQ0FBQyxLQUFLQSxnQkFBZ0IsSUFBSSxDQUFDWCxXQUFXLENBQUU7UUFDN0RVLFFBQVFDLGdCQUFnQjtRQUN4QkgsY0FBYztJQUNsQjtJQUNBLElBQUlDLGtCQUFrQixJQUFJLENBQUNULFdBQVcsR0FBR1UsUUFBUTtJQUNqRCxPQUFPO1FBQUNGLFlBQVlBO1FBQVlDLGlCQUFpQkE7SUFBZTtBQUNwRSIsInNvdXJjZXMiOlsid2VicGFjazovL3RzYS1wbGF0Zm9ybS8uL25vZGVfbW9kdWxlcy9sb3AvbGliL1N0cmluZ1NvdXJjZS5qcz9hODdlIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBTdHJpbmdTb3VyY2UgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHN0cmluZywgZGVzY3JpcHRpb24pIHtcbiAgICB2YXIgc2VsZiA9IHtcbiAgICAgICAgYXNTdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgICAgfSxcbiAgICAgICAgcmFuZ2U6IGZ1bmN0aW9uKHN0YXJ0SW5kZXgsIGVuZEluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFN0cmluZ1NvdXJjZVJhbmdlKHN0cmluZywgZGVzY3JpcHRpb24sIHN0YXJ0SW5kZXgsIGVuZEluZGV4KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHNlbGY7XG59O1xuXG52YXIgU3RyaW5nU291cmNlUmFuZ2UgPSBmdW5jdGlvbihzdHJpbmcsIGRlc2NyaXB0aW9uLCBzdGFydEluZGV4LCBlbmRJbmRleCkge1xuICAgIHRoaXMuX3N0cmluZyA9IHN0cmluZztcbiAgICB0aGlzLl9kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICAgIHRoaXMuX3N0YXJ0SW5kZXggPSBzdGFydEluZGV4O1xuICAgIHRoaXMuX2VuZEluZGV4ID0gZW5kSW5kZXg7XG59O1xuXG5TdHJpbmdTb3VyY2VSYW5nZS5wcm90b3R5cGUudG8gPSBmdW5jdGlvbihvdGhlclJhbmdlKSB7XG4gICAgLy8gVE9ETzogQXNzZXJ0IHRoYXQgdG9rZW5zIGFyZSB0aGUgc2FtZSBhY3Jvc3MgYm90aCBpdGVyYXRvcnNcbiAgICByZXR1cm4gbmV3IFN0cmluZ1NvdXJjZVJhbmdlKHRoaXMuX3N0cmluZywgdGhpcy5fZGVzY3JpcHRpb24sIHRoaXMuX3N0YXJ0SW5kZXgsIG90aGVyUmFuZ2UuX2VuZEluZGV4KTtcbn07XG5cblN0cmluZ1NvdXJjZVJhbmdlLnByb3RvdHlwZS5kZXNjcmliZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwb3NpdGlvbiA9IHRoaXMuX3Bvc2l0aW9uKCk7XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gdGhpcy5fZGVzY3JpcHRpb24gPyB0aGlzLl9kZXNjcmlwdGlvbiArIFwiXFxuXCIgOiBcIlwiO1xuICAgIHJldHVybiBkZXNjcmlwdGlvbiArIFwiTGluZSBudW1iZXI6IFwiICsgcG9zaXRpb24ubGluZU51bWJlciArIFwiXFxuQ2hhcmFjdGVyIG51bWJlcjogXCIgKyBwb3NpdGlvbi5jaGFyYWN0ZXJOdW1iZXI7XG59O1xuXG5TdHJpbmdTb3VyY2VSYW5nZS5wcm90b3R5cGUubGluZU51bWJlciA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9wb3NpdGlvbigpLmxpbmVOdW1iZXI7XG59O1xuXG5TdHJpbmdTb3VyY2VSYW5nZS5wcm90b3R5cGUuY2hhcmFjdGVyTnVtYmVyID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Bvc2l0aW9uKCkuY2hhcmFjdGVyTnVtYmVyO1xufTtcblxuU3RyaW5nU291cmNlUmFuZ2UucHJvdG90eXBlLl9wb3NpdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBuZXh0TmV3TGluZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gc2VsZi5fc3RyaW5nLmluZGV4T2YoXCJcXG5cIiwgaW5kZXgpO1xuICAgIH07XG5cbiAgICB2YXIgbGluZU51bWJlciA9IDE7XG4gICAgd2hpbGUgKG5leHROZXdMaW5lKCkgIT09IC0xICYmIG5leHROZXdMaW5lKCkgPCB0aGlzLl9zdGFydEluZGV4KSB7XG4gICAgICAgIGluZGV4ID0gbmV4dE5ld0xpbmUoKSArIDE7XG4gICAgICAgIGxpbmVOdW1iZXIgKz0gMTtcbiAgICB9XG4gICAgdmFyIGNoYXJhY3Rlck51bWJlciA9IHRoaXMuX3N0YXJ0SW5kZXggLSBpbmRleCArIDE7XG4gICAgcmV0dXJuIHtsaW5lTnVtYmVyOiBsaW5lTnVtYmVyLCBjaGFyYWN0ZXJOdW1iZXI6IGNoYXJhY3Rlck51bWJlcn07XG59O1xuIl0sIm5hbWVzIjpbIlN0cmluZ1NvdXJjZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzdHJpbmciLCJkZXNjcmlwdGlvbiIsInNlbGYiLCJhc1N0cmluZyIsInJhbmdlIiwic3RhcnRJbmRleCIsImVuZEluZGV4IiwiU3RyaW5nU291cmNlUmFuZ2UiLCJfc3RyaW5nIiwiX2Rlc2NyaXB0aW9uIiwiX3N0YXJ0SW5kZXgiLCJfZW5kSW5kZXgiLCJwcm90b3R5cGUiLCJ0byIsIm90aGVyUmFuZ2UiLCJkZXNjcmliZSIsInBvc2l0aW9uIiwiX3Bvc2l0aW9uIiwibGluZU51bWJlciIsImNoYXJhY3Rlck51bWJlciIsImluZGV4IiwibmV4dE5ld0xpbmUiLCJpbmRleE9mIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lop/lib/StringSource.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/lop/lib/Token.js":
/*!***************************************!*\
  !*** ./node_modules/lop/lib/Token.js ***!
  \***************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = function(name, value, source) {\n    this.name = name;\n    this.value = value;\n    if (source) {\n        this.source = source;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbG9wL2xpYi9Ub2tlbi5qcyIsIm1hcHBpbmdzIjoiO0FBQUFBLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxJQUFJLEVBQUVDLEtBQUssRUFBRUMsTUFBTTtJQUN6QyxJQUFJLENBQUNGLElBQUksR0FBR0E7SUFDWixJQUFJLENBQUNDLEtBQUssR0FBR0E7SUFDYixJQUFJQyxRQUFRO1FBQ1IsSUFBSSxDQUFDQSxNQUFNLEdBQUdBO0lBQ2xCO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90c2EtcGxhdGZvcm0vLi9ub2RlX21vZHVsZXMvbG9wL2xpYi9Ub2tlbi5qcz9kNzBjIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obmFtZSwgdmFsdWUsIHNvdXJjZSkge1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgfVxufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibmFtZSIsInZhbHVlIiwic291cmNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lop/lib/Token.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/lop/lib/TokenIterator.js":
/*!***********************************************!*\
  !*** ./node_modules/lop/lib/TokenIterator.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
eval("\nvar TokenIterator = module.exports = function(tokens, startIndex) {\n    this._tokens = tokens;\n    this._startIndex = startIndex || 0;\n};\nTokenIterator.prototype.head = function() {\n    return this._tokens[this._startIndex];\n};\nTokenIterator.prototype.tail = function(startIndex) {\n    return new TokenIterator(this._tokens, this._startIndex + 1);\n};\nTokenIterator.prototype.toArray = function() {\n    return this._tokens.slice(this._startIndex);\n};\nTokenIterator.prototype.end = function() {\n    return this._tokens[this._tokens.length - 1];\n};\n// TODO: doesn't need to be a method, can be a separate function,\n// which simplifies implementation of the TokenIterator interface\nTokenIterator.prototype.to = function(end) {\n    var start = this.head().source;\n    var endToken = end.head() || end.end();\n    return start.to(endToken.source);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbG9wL2xpYi9Ub2tlbkl0ZXJhdG9yLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxnQkFBZ0JDLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxNQUFNLEVBQUVDLFVBQVU7SUFDNUQsSUFBSSxDQUFDQyxPQUFPLEdBQUdGO0lBQ2YsSUFBSSxDQUFDRyxXQUFXLEdBQUdGLGNBQWM7QUFDckM7QUFFQUosY0FBY08sU0FBUyxDQUFDQyxJQUFJLEdBQUc7SUFDM0IsT0FBTyxJQUFJLENBQUNILE9BQU8sQ0FBQyxJQUFJLENBQUNDLFdBQVcsQ0FBQztBQUN6QztBQUVBTixjQUFjTyxTQUFTLENBQUNFLElBQUksR0FBRyxTQUFTTCxVQUFVO0lBQzlDLE9BQU8sSUFBSUosY0FBYyxJQUFJLENBQUNLLE9BQU8sRUFBRSxJQUFJLENBQUNDLFdBQVcsR0FBRztBQUM5RDtBQUVBTixjQUFjTyxTQUFTLENBQUNHLE9BQU8sR0FBRztJQUM5QixPQUFPLElBQUksQ0FBQ0wsT0FBTyxDQUFDTSxLQUFLLENBQUMsSUFBSSxDQUFDTCxXQUFXO0FBQzlDO0FBRUFOLGNBQWNPLFNBQVMsQ0FBQ0ssR0FBRyxHQUFHO0lBQzFCLE9BQU8sSUFBSSxDQUFDUCxPQUFPLENBQUMsSUFBSSxDQUFDQSxPQUFPLENBQUNRLE1BQU0sR0FBRyxFQUFFO0FBQ2hEO0FBRUEsaUVBQWlFO0FBQ2pFLGlFQUFpRTtBQUNqRWIsY0FBY08sU0FBUyxDQUFDTyxFQUFFLEdBQUcsU0FBU0YsR0FBRztJQUNyQyxJQUFJRyxRQUFRLElBQUksQ0FBQ1AsSUFBSSxHQUFHUSxNQUFNO0lBQzlCLElBQUlDLFdBQVdMLElBQUlKLElBQUksTUFBTUksSUFBSUEsR0FBRztJQUNwQyxPQUFPRyxNQUFNRCxFQUFFLENBQUNHLFNBQVNELE1BQU07QUFDbkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90c2EtcGxhdGZvcm0vLi9ub2RlX21vZHVsZXMvbG9wL2xpYi9Ub2tlbkl0ZXJhdG9yLmpzP2EzYTYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIFRva2VuSXRlcmF0b3IgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRva2Vucywgc3RhcnRJbmRleCkge1xuICAgIHRoaXMuX3Rva2VucyA9IHRva2VucztcbiAgICB0aGlzLl9zdGFydEluZGV4ID0gc3RhcnRJbmRleCB8fCAwO1xufTtcblxuVG9rZW5JdGVyYXRvci5wcm90b3R5cGUuaGVhZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl90b2tlbnNbdGhpcy5fc3RhcnRJbmRleF07XG59O1xuXG5Ub2tlbkl0ZXJhdG9yLnByb3RvdHlwZS50YWlsID0gZnVuY3Rpb24oc3RhcnRJbmRleCkge1xuICAgIHJldHVybiBuZXcgVG9rZW5JdGVyYXRvcih0aGlzLl90b2tlbnMsIHRoaXMuX3N0YXJ0SW5kZXggKyAxKTtcbn07XG5cblRva2VuSXRlcmF0b3IucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fdG9rZW5zLnNsaWNlKHRoaXMuX3N0YXJ0SW5kZXgpO1xufTtcblxuVG9rZW5JdGVyYXRvci5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Rva2Vuc1t0aGlzLl90b2tlbnMubGVuZ3RoIC0gMV07XG59O1xuXG4vLyBUT0RPOiBkb2Vzbid0IG5lZWQgdG8gYmUgYSBtZXRob2QsIGNhbiBiZSBhIHNlcGFyYXRlIGZ1bmN0aW9uLFxuLy8gd2hpY2ggc2ltcGxpZmllcyBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgVG9rZW5JdGVyYXRvciBpbnRlcmZhY2VcblRva2VuSXRlcmF0b3IucHJvdG90eXBlLnRvID0gZnVuY3Rpb24oZW5kKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5oZWFkKCkuc291cmNlO1xuICAgIHZhciBlbmRUb2tlbiA9IGVuZC5oZWFkKCkgfHwgZW5kLmVuZCgpO1xuICAgIHJldHVybiBzdGFydC50byhlbmRUb2tlbi5zb3VyY2UpO1xufTtcbiJdLCJuYW1lcyI6WyJUb2tlbkl0ZXJhdG9yIiwibW9kdWxlIiwiZXhwb3J0cyIsInRva2VucyIsInN0YXJ0SW5kZXgiLCJfdG9rZW5zIiwiX3N0YXJ0SW5kZXgiLCJwcm90b3R5cGUiLCJoZWFkIiwidGFpbCIsInRvQXJyYXkiLCJzbGljZSIsImVuZCIsImxlbmd0aCIsInRvIiwic3RhcnQiLCJzb3VyY2UiLCJlbmRUb2tlbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lop/lib/TokenIterator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/lop/lib/bottom-up.js":
/*!*******************************************!*\
  !*** ./node_modules/lop/lib/bottom-up.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var rules = __webpack_require__(/*! ./rules */ \"(ssr)/./node_modules/lop/lib/rules.js\");\nvar results = __webpack_require__(/*! ./parsing-results */ \"(ssr)/./node_modules/lop/lib/parsing-results.js\");\nexports.parser = function(name, prefixRules, infixRuleBuilders) {\n    var self = {\n        rule: rule,\n        leftAssociative: leftAssociative,\n        rightAssociative: rightAssociative\n    };\n    var infixRules = new InfixRules(infixRuleBuilders.map(createInfixRule));\n    var prefixRule = rules.firstOf(name, prefixRules);\n    function createInfixRule(infixRuleBuilder) {\n        return {\n            name: infixRuleBuilder.name,\n            rule: lazyRule(infixRuleBuilder.ruleBuilder.bind(null, self))\n        };\n    }\n    function rule() {\n        return createRule(infixRules);\n    }\n    function leftAssociative(name) {\n        return createRule(infixRules.untilExclusive(name));\n    }\n    function rightAssociative(name) {\n        return createRule(infixRules.untilInclusive(name));\n    }\n    function createRule(infixRules) {\n        return apply.bind(null, infixRules);\n    }\n    function apply(infixRules, tokens) {\n        var leftResult = prefixRule(tokens);\n        if (leftResult.isSuccess()) {\n            return infixRules.apply(leftResult);\n        } else {\n            return leftResult;\n        }\n    }\n    return self;\n};\nfunction InfixRules(infixRules) {\n    function untilExclusive(name) {\n        return new InfixRules(infixRules.slice(0, ruleNames().indexOf(name)));\n    }\n    function untilInclusive(name) {\n        return new InfixRules(infixRules.slice(0, ruleNames().indexOf(name) + 1));\n    }\n    function ruleNames() {\n        return infixRules.map(function(rule) {\n            return rule.name;\n        });\n    }\n    function apply(leftResult) {\n        var currentResult;\n        var source;\n        while(true){\n            currentResult = applyToTokens(leftResult.remaining());\n            if (currentResult.isSuccess()) {\n                source = leftResult.source().to(currentResult.source());\n                leftResult = results.success(currentResult.value()(leftResult.value(), source), currentResult.remaining(), source);\n            } else if (currentResult.isFailure()) {\n                return leftResult;\n            } else {\n                return currentResult;\n            }\n        }\n    }\n    function applyToTokens(tokens) {\n        return rules.firstOf(\"infix\", infixRules.map(function(infix) {\n            return infix.rule;\n        }))(tokens);\n    }\n    return {\n        apply: apply,\n        untilExclusive: untilExclusive,\n        untilInclusive: untilInclusive\n    };\n}\nexports.infix = function(name, ruleBuilder) {\n    function map(func) {\n        return exports.infix(name, function(parser) {\n            var rule = ruleBuilder(parser);\n            return function(tokens) {\n                var result = rule(tokens);\n                return result.map(function(right) {\n                    return function(left, source) {\n                        return func(left, right, source);\n                    };\n                });\n            };\n        });\n    }\n    return {\n        name: name,\n        ruleBuilder: ruleBuilder,\n        map: map\n    };\n};\n// TODO: move into a sensible place and remove duplication\nvar lazyRule = function(ruleBuilder) {\n    var rule;\n    return function(input) {\n        if (!rule) {\n            rule = ruleBuilder();\n        }\n        return rule(input);\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lop/lib/bottom-up.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/lop/lib/errors.js":
/*!****************************************!*\
  !*** ./node_modules/lop/lib/errors.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("exports.error = function(options) {\n    return new Error(options);\n};\nvar Error = function(options) {\n    this.expected = options.expected;\n    this.actual = options.actual;\n    this._location = options.location;\n};\nError.prototype.describe = function() {\n    var locationDescription = this._location ? this._location.describe() + \":\\n\" : \"\";\n    return locationDescription + \"Expected \" + this.expected + \"\\nbut got \" + this.actual;\n};\nError.prototype.lineNumber = function() {\n    return this._location.lineNumber();\n};\nError.prototype.characterNumber = function() {\n    return this._location.characterNumber();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbG9wL2xpYi9lcnJvcnMuanMiLCJtYXBwaW5ncyI6IkFBQUFBLGFBQWEsR0FBRyxTQUFTRSxPQUFPO0lBQzVCLE9BQU8sSUFBSUMsTUFBTUQ7QUFDckI7QUFFQSxJQUFJQyxRQUFRLFNBQVNELE9BQU87SUFDeEIsSUFBSSxDQUFDRSxRQUFRLEdBQUdGLFFBQVFFLFFBQVE7SUFDaEMsSUFBSSxDQUFDQyxNQUFNLEdBQUdILFFBQVFHLE1BQU07SUFDNUIsSUFBSSxDQUFDQyxTQUFTLEdBQUdKLFFBQVFLLFFBQVE7QUFDckM7QUFFQUosTUFBTUssU0FBUyxDQUFDQyxRQUFRLEdBQUc7SUFDdkIsSUFBSUMsc0JBQXNCLElBQUksQ0FBQ0osU0FBUyxHQUFHLElBQUksQ0FBQ0EsU0FBUyxDQUFDRyxRQUFRLEtBQUssUUFBUTtJQUMvRSxPQUFPQyxzQkFBc0IsY0FBYyxJQUFJLENBQUNOLFFBQVEsR0FBRyxlQUFlLElBQUksQ0FBQ0MsTUFBTTtBQUN6RjtBQUVBRixNQUFNSyxTQUFTLENBQUNHLFVBQVUsR0FBRztJQUN6QixPQUFPLElBQUksQ0FBQ0wsU0FBUyxDQUFDSyxVQUFVO0FBQ3BDO0FBRUFSLE1BQU1LLFNBQVMsQ0FBQ0ksZUFBZSxHQUFHO0lBQzlCLE9BQU8sSUFBSSxDQUFDTixTQUFTLENBQUNNLGVBQWU7QUFDekMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90c2EtcGxhdGZvcm0vLi9ub2RlX21vZHVsZXMvbG9wL2xpYi9lcnJvcnMuanM/Yzk1OCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzLmVycm9yID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgRXJyb3Iob3B0aW9ucyk7XG59O1xuXG52YXIgRXJyb3IgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdGhpcy5leHBlY3RlZCA9IG9wdGlvbnMuZXhwZWN0ZWQ7XG4gICAgdGhpcy5hY3R1YWwgPSBvcHRpb25zLmFjdHVhbDtcbiAgICB0aGlzLl9sb2NhdGlvbiA9IG9wdGlvbnMubG9jYXRpb247XG59O1xuXG5FcnJvci5wcm90b3R5cGUuZGVzY3JpYmUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbG9jYXRpb25EZXNjcmlwdGlvbiA9IHRoaXMuX2xvY2F0aW9uID8gdGhpcy5fbG9jYXRpb24uZGVzY3JpYmUoKSArIFwiOlxcblwiIDogXCJcIjtcbiAgICByZXR1cm4gbG9jYXRpb25EZXNjcmlwdGlvbiArIFwiRXhwZWN0ZWQgXCIgKyB0aGlzLmV4cGVjdGVkICsgXCJcXG5idXQgZ290IFwiICsgdGhpcy5hY3R1YWw7XG59O1xuXG5FcnJvci5wcm90b3R5cGUubGluZU51bWJlciA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9sb2NhdGlvbi5saW5lTnVtYmVyKCk7XG59O1xuXG5FcnJvci5wcm90b3R5cGUuY2hhcmFjdGVyTnVtYmVyID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xvY2F0aW9uLmNoYXJhY3Rlck51bWJlcigpO1xufTtcbiJdLCJuYW1lcyI6WyJleHBvcnRzIiwiZXJyb3IiLCJvcHRpb25zIiwiRXJyb3IiLCJleHBlY3RlZCIsImFjdHVhbCIsIl9sb2NhdGlvbiIsImxvY2F0aW9uIiwicHJvdG90eXBlIiwiZGVzY3JpYmUiLCJsb2NhdGlvbkRlc2NyaXB0aW9uIiwibGluZU51bWJlciIsImNoYXJhY3Rlck51bWJlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lop/lib/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/lop/lib/lazy-iterators.js":
/*!************************************************!*\
  !*** ./node_modules/lop/lib/lazy-iterators.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("var fromArray = exports.fromArray = function(array) {\n    var index = 0;\n    var hasNext = function() {\n        return index < array.length;\n    };\n    return new LazyIterator({\n        hasNext: hasNext,\n        next: function() {\n            if (!hasNext()) {\n                throw new Error(\"No more elements\");\n            } else {\n                return array[index++];\n            }\n        }\n    });\n};\nvar LazyIterator = function(iterator) {\n    this._iterator = iterator;\n};\nLazyIterator.prototype.map = function(func) {\n    var iterator = this._iterator;\n    return new LazyIterator({\n        hasNext: function() {\n            return iterator.hasNext();\n        },\n        next: function() {\n            return func(iterator.next());\n        }\n    });\n};\nLazyIterator.prototype.filter = function(condition) {\n    var iterator = this._iterator;\n    var moved = false;\n    var hasNext = false;\n    var next;\n    var moveIfNecessary = function() {\n        if (moved) {\n            return;\n        }\n        moved = true;\n        hasNext = false;\n        while(iterator.hasNext() && !hasNext){\n            next = iterator.next();\n            hasNext = condition(next);\n        }\n    };\n    return new LazyIterator({\n        hasNext: function() {\n            moveIfNecessary();\n            return hasNext;\n        },\n        next: function() {\n            moveIfNecessary();\n            var toReturn = next;\n            moved = false;\n            return toReturn;\n        }\n    });\n};\nLazyIterator.prototype.first = function() {\n    var iterator = this._iterator;\n    if (this._iterator.hasNext()) {\n        return iterator.next();\n    } else {\n        return null;\n    }\n};\nLazyIterator.prototype.toArray = function() {\n    var result = [];\n    while(this._iterator.hasNext()){\n        result.push(this._iterator.next());\n    }\n    return result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbG9wL2xpYi9sYXp5LWl0ZXJhdG9ycy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxZQUFZQyxpQkFBaUIsR0FBRyxTQUFTQyxLQUFLO0lBQzlDLElBQUlDLFFBQVE7SUFDWixJQUFJQyxVQUFVO1FBQ1YsT0FBT0QsUUFBUUQsTUFBTUcsTUFBTTtJQUMvQjtJQUNBLE9BQU8sSUFBSUMsYUFBYTtRQUNwQkYsU0FBU0E7UUFDVEcsTUFBTTtZQUNGLElBQUksQ0FBQ0gsV0FBVztnQkFDWixNQUFNLElBQUlJLE1BQU07WUFDcEIsT0FBTztnQkFDSCxPQUFPTixLQUFLLENBQUNDLFFBQVE7WUFDekI7UUFDSjtJQUNKO0FBQ0o7QUFFQSxJQUFJRyxlQUFlLFNBQVNHLFFBQVE7SUFDaEMsSUFBSSxDQUFDQyxTQUFTLEdBQUdEO0FBQ3JCO0FBRUFILGFBQWFLLFNBQVMsQ0FBQ0MsR0FBRyxHQUFHLFNBQVNDLElBQUk7SUFDdEMsSUFBSUosV0FBVyxJQUFJLENBQUNDLFNBQVM7SUFDN0IsT0FBTyxJQUFJSixhQUFhO1FBQ3BCRixTQUFTO1lBQ0wsT0FBT0ssU0FBU0wsT0FBTztRQUMzQjtRQUNBRyxNQUFNO1lBQ0YsT0FBT00sS0FBS0osU0FBU0YsSUFBSTtRQUM3QjtJQUNKO0FBQ0o7QUFFQUQsYUFBYUssU0FBUyxDQUFDRyxNQUFNLEdBQUcsU0FBU0MsU0FBUztJQUM5QyxJQUFJTixXQUFXLElBQUksQ0FBQ0MsU0FBUztJQUU3QixJQUFJTSxRQUFRO0lBQ1osSUFBSVosVUFBVTtJQUNkLElBQUlHO0lBQ0osSUFBSVUsa0JBQWtCO1FBQ2xCLElBQUlELE9BQU87WUFDUDtRQUNKO1FBQ0FBLFFBQVE7UUFDUlosVUFBVTtRQUNWLE1BQU9LLFNBQVNMLE9BQU8sTUFBTSxDQUFDQSxRQUFTO1lBQ25DRyxPQUFPRSxTQUFTRixJQUFJO1lBQ3BCSCxVQUFVVyxVQUFVUjtRQUN4QjtJQUNKO0lBRUEsT0FBTyxJQUFJRCxhQUFhO1FBQ3BCRixTQUFTO1lBQ0xhO1lBQ0EsT0FBT2I7UUFDWDtRQUNBRyxNQUFNO1lBQ0ZVO1lBQ0EsSUFBSUMsV0FBV1g7WUFDZlMsUUFBUTtZQUNSLE9BQU9FO1FBQ1g7SUFDSjtBQUNKO0FBRUFaLGFBQWFLLFNBQVMsQ0FBQ1EsS0FBSyxHQUFHO0lBQzNCLElBQUlWLFdBQVcsSUFBSSxDQUFDQyxTQUFTO0lBQzdCLElBQUksSUFBSSxDQUFDQSxTQUFTLENBQUNOLE9BQU8sSUFBSTtRQUMxQixPQUFPSyxTQUFTRixJQUFJO0lBQ3hCLE9BQU87UUFDSCxPQUFPO0lBQ1g7QUFDSjtBQUVBRCxhQUFhSyxTQUFTLENBQUNTLE9BQU8sR0FBRztJQUM3QixJQUFJQyxTQUFTLEVBQUU7SUFDZixNQUFPLElBQUksQ0FBQ1gsU0FBUyxDQUFDTixPQUFPLEdBQUk7UUFDN0JpQixPQUFPQyxJQUFJLENBQUMsSUFBSSxDQUFDWixTQUFTLENBQUNILElBQUk7SUFDbkM7SUFDQSxPQUFPYztBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdHNhLXBsYXRmb3JtLy4vbm9kZV9tb2R1bGVzL2xvcC9saWIvbGF6eS1pdGVyYXRvcnMuanM/NzQwNiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZnJvbUFycmF5ID0gZXhwb3J0cy5mcm9tQXJyYXkgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGhhc05leHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4IDwgYXJyYXkubGVuZ3RoO1xuICAgIH07XG4gICAgcmV0dXJuIG5ldyBMYXp5SXRlcmF0b3Ioe1xuICAgICAgICBoYXNOZXh0OiBoYXNOZXh0LFxuICAgICAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghaGFzTmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gbW9yZSBlbGVtZW50c1wiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5W2luZGV4KytdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG52YXIgTGF6eUl0ZXJhdG9yID0gZnVuY3Rpb24oaXRlcmF0b3IpIHtcbiAgICB0aGlzLl9pdGVyYXRvciA9IGl0ZXJhdG9yO1xufTtcblxuTGF6eUl0ZXJhdG9yLnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbihmdW5jKSB7XG4gICAgdmFyIGl0ZXJhdG9yID0gdGhpcy5faXRlcmF0b3I7XG4gICAgcmV0dXJuIG5ldyBMYXp5SXRlcmF0b3Ioe1xuICAgICAgICBoYXNOZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVyYXRvci5oYXNOZXh0KCk7XG4gICAgICAgIH0sXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmMoaXRlcmF0b3IubmV4dCgpKTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuTGF6eUl0ZXJhdG9yLnByb3RvdHlwZS5maWx0ZXIgPSBmdW5jdGlvbihjb25kaXRpb24pIHtcbiAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLl9pdGVyYXRvcjtcbiAgICBcbiAgICB2YXIgbW92ZWQgPSBmYWxzZTtcbiAgICB2YXIgaGFzTmV4dCA9IGZhbHNlO1xuICAgIHZhciBuZXh0O1xuICAgIHZhciBtb3ZlSWZOZWNlc3NhcnkgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKG1vdmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbW92ZWQgPSB0cnVlO1xuICAgICAgICBoYXNOZXh0ID0gZmFsc2U7XG4gICAgICAgIHdoaWxlIChpdGVyYXRvci5oYXNOZXh0KCkgJiYgIWhhc05leHQpIHtcbiAgICAgICAgICAgIG5leHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICBoYXNOZXh0ID0gY29uZGl0aW9uKG5leHQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBcbiAgICByZXR1cm4gbmV3IExhenlJdGVyYXRvcih7XG4gICAgICAgIGhhc05leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbW92ZUlmTmVjZXNzYXJ5KCk7XG4gICAgICAgICAgICByZXR1cm4gaGFzTmV4dDtcbiAgICAgICAgfSxcbiAgICAgICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBtb3ZlSWZOZWNlc3NhcnkoKTtcbiAgICAgICAgICAgIHZhciB0b1JldHVybiA9IG5leHQ7XG4gICAgICAgICAgICBtb3ZlZCA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIHRvUmV0dXJuO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5MYXp5SXRlcmF0b3IucHJvdG90eXBlLmZpcnN0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGl0ZXJhdG9yID0gdGhpcy5faXRlcmF0b3I7XG4gICAgaWYgKHRoaXMuX2l0ZXJhdG9yLmhhc05leHQoKSkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3IubmV4dCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn07XG5cbkxhenlJdGVyYXRvci5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB3aGlsZSAodGhpcy5faXRlcmF0b3IuaGFzTmV4dCgpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHRoaXMuX2l0ZXJhdG9yLm5leHQoKSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuIl0sIm5hbWVzIjpbImZyb21BcnJheSIsImV4cG9ydHMiLCJhcnJheSIsImluZGV4IiwiaGFzTmV4dCIsImxlbmd0aCIsIkxhenlJdGVyYXRvciIsIm5leHQiLCJFcnJvciIsIml0ZXJhdG9yIiwiX2l0ZXJhdG9yIiwicHJvdG90eXBlIiwibWFwIiwiZnVuYyIsImZpbHRlciIsImNvbmRpdGlvbiIsIm1vdmVkIiwibW92ZUlmTmVjZXNzYXJ5IiwidG9SZXR1cm4iLCJmaXJzdCIsInRvQXJyYXkiLCJyZXN1bHQiLCJwdXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lop/lib/lazy-iterators.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/lop/lib/parser.js":
/*!****************************************!*\
  !*** ./node_modules/lop/lib/parser.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var TokenIterator = __webpack_require__(/*! ./TokenIterator */ \"(ssr)/./node_modules/lop/lib/TokenIterator.js\");\nexports.Parser = function(options) {\n    var parseTokens = function(parser, tokens) {\n        return parser(new TokenIterator(tokens));\n    };\n    return {\n        parseTokens: parseTokens\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbG9wL2xpYi9wYXJzZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsZ0JBQWdCQyxtQkFBT0EsQ0FBQyxzRUFBaUI7QUFFN0NDLGNBQWMsR0FBRyxTQUFTRSxPQUFPO0lBQzdCLElBQUlDLGNBQWMsU0FBU0MsTUFBTSxFQUFFQyxNQUFNO1FBQ3JDLE9BQU9ELE9BQU8sSUFBSU4sY0FBY087SUFDcEM7SUFFQSxPQUFPO1FBQ0hGLGFBQWFBO0lBQ2pCO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90c2EtcGxhdGZvcm0vLi9ub2RlX21vZHVsZXMvbG9wL2xpYi9wYXJzZXIuanM/NThhMCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgVG9rZW5JdGVyYXRvciA9IHJlcXVpcmUoXCIuL1Rva2VuSXRlcmF0b3JcIik7XG5cbmV4cG9ydHMuUGFyc2VyID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHZhciBwYXJzZVRva2VucyA9IGZ1bmN0aW9uKHBhcnNlciwgdG9rZW5zKSB7XG4gICAgICAgIHJldHVybiBwYXJzZXIobmV3IFRva2VuSXRlcmF0b3IodG9rZW5zKSk7XG4gICAgfTtcbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgICBwYXJzZVRva2VuczogcGFyc2VUb2tlbnNcbiAgICB9O1xufTtcbiJdLCJuYW1lcyI6WyJUb2tlbkl0ZXJhdG9yIiwicmVxdWlyZSIsImV4cG9ydHMiLCJQYXJzZXIiLCJvcHRpb25zIiwicGFyc2VUb2tlbnMiLCJwYXJzZXIiLCJ0b2tlbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lop/lib/parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/lop/lib/parsing-results.js":
/*!*************************************************!*\
  !*** ./node_modules/lop/lib/parsing-results.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = {\n    failure: function(errors, remaining) {\n        if (errors.length < 1) {\n            throw new Error(\"Failure must have errors\");\n        }\n        return new Result({\n            status: \"failure\",\n            remaining: remaining,\n            errors: errors\n        });\n    },\n    error: function(errors, remaining) {\n        if (errors.length < 1) {\n            throw new Error(\"Failure must have errors\");\n        }\n        return new Result({\n            status: \"error\",\n            remaining: remaining,\n            errors: errors\n        });\n    },\n    success: function(value, remaining, source) {\n        return new Result({\n            status: \"success\",\n            value: value,\n            source: source,\n            remaining: remaining,\n            errors: []\n        });\n    },\n    cut: function(remaining) {\n        return new Result({\n            status: \"cut\",\n            remaining: remaining,\n            errors: []\n        });\n    }\n};\nvar Result = function(options) {\n    this._value = options.value;\n    this._status = options.status;\n    this._hasValue = options.value !== undefined;\n    this._remaining = options.remaining;\n    this._source = options.source;\n    this._errors = options.errors;\n};\nResult.prototype.map = function(func) {\n    if (this._hasValue) {\n        return new Result({\n            value: func(this._value, this._source),\n            status: this._status,\n            remaining: this._remaining,\n            source: this._source,\n            errors: this._errors\n        });\n    } else {\n        return this;\n    }\n};\nResult.prototype.changeRemaining = function(remaining) {\n    return new Result({\n        value: this._value,\n        status: this._status,\n        remaining: remaining,\n        source: this._source,\n        errors: this._errors\n    });\n};\nResult.prototype.isSuccess = function() {\n    return this._status === \"success\" || this._status === \"cut\";\n};\nResult.prototype.isFailure = function() {\n    return this._status === \"failure\";\n};\nResult.prototype.isError = function() {\n    return this._status === \"error\";\n};\nResult.prototype.isCut = function() {\n    return this._status === \"cut\";\n};\nResult.prototype.value = function() {\n    return this._value;\n};\nResult.prototype.remaining = function() {\n    return this._remaining;\n};\nResult.prototype.source = function() {\n    return this._source;\n};\nResult.prototype.errors = function() {\n    return this._errors;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbG9wL2xpYi9wYXJzaW5nLXJlc3VsdHMuanMiLCJtYXBwaW5ncyI6IjtBQUFBQSxPQUFPQyxPQUFPLEdBQUc7SUFDYkMsU0FBUyxTQUFTQyxNQUFNLEVBQUVDLFNBQVM7UUFDL0IsSUFBSUQsT0FBT0UsTUFBTSxHQUFHLEdBQUc7WUFDbkIsTUFBTSxJQUFJQyxNQUFNO1FBQ3BCO1FBQ0EsT0FBTyxJQUFJQyxPQUFPO1lBQ2RDLFFBQVE7WUFDUkosV0FBV0E7WUFDWEQsUUFBUUE7UUFDWjtJQUNKO0lBQ0FNLE9BQU8sU0FBU04sTUFBTSxFQUFFQyxTQUFTO1FBQzdCLElBQUlELE9BQU9FLE1BQU0sR0FBRyxHQUFHO1lBQ25CLE1BQU0sSUFBSUMsTUFBTTtRQUNwQjtRQUNBLE9BQU8sSUFBSUMsT0FBTztZQUNkQyxRQUFRO1lBQ1JKLFdBQVdBO1lBQ1hELFFBQVFBO1FBQ1o7SUFDSjtJQUNBTyxTQUFTLFNBQVNDLEtBQUssRUFBRVAsU0FBUyxFQUFFUSxNQUFNO1FBQ3RDLE9BQU8sSUFBSUwsT0FBTztZQUNkQyxRQUFRO1lBQ1JHLE9BQU9BO1lBQ1BDLFFBQVFBO1lBQ1JSLFdBQVdBO1lBQ1hELFFBQVEsRUFBRTtRQUNkO0lBQ0o7SUFDQVUsS0FBSyxTQUFTVCxTQUFTO1FBQ25CLE9BQU8sSUFBSUcsT0FBTztZQUNkQyxRQUFRO1lBQ1JKLFdBQVdBO1lBQ1hELFFBQVEsRUFBRTtRQUNkO0lBQ0o7QUFDSjtBQUVBLElBQUlJLFNBQVMsU0FBU08sT0FBTztJQUN6QixJQUFJLENBQUNDLE1BQU0sR0FBR0QsUUFBUUgsS0FBSztJQUMzQixJQUFJLENBQUNLLE9BQU8sR0FBR0YsUUFBUU4sTUFBTTtJQUM3QixJQUFJLENBQUNTLFNBQVMsR0FBR0gsUUFBUUgsS0FBSyxLQUFLTztJQUNuQyxJQUFJLENBQUNDLFVBQVUsR0FBR0wsUUFBUVYsU0FBUztJQUNuQyxJQUFJLENBQUNnQixPQUFPLEdBQUdOLFFBQVFGLE1BQU07SUFDN0IsSUFBSSxDQUFDUyxPQUFPLEdBQUdQLFFBQVFYLE1BQU07QUFDakM7QUFFQUksT0FBT2UsU0FBUyxDQUFDQyxHQUFHLEdBQUcsU0FBU0MsSUFBSTtJQUNoQyxJQUFJLElBQUksQ0FBQ1AsU0FBUyxFQUFFO1FBQ2hCLE9BQU8sSUFBSVYsT0FBTztZQUNkSSxPQUFPYSxLQUFLLElBQUksQ0FBQ1QsTUFBTSxFQUFFLElBQUksQ0FBQ0ssT0FBTztZQUNyQ1osUUFBUSxJQUFJLENBQUNRLE9BQU87WUFDcEJaLFdBQVcsSUFBSSxDQUFDZSxVQUFVO1lBQzFCUCxRQUFRLElBQUksQ0FBQ1EsT0FBTztZQUNwQmpCLFFBQVEsSUFBSSxDQUFDa0IsT0FBTztRQUN4QjtJQUNKLE9BQU87UUFDSCxPQUFPLElBQUk7SUFDZjtBQUNKO0FBRUFkLE9BQU9lLFNBQVMsQ0FBQ0csZUFBZSxHQUFHLFNBQVNyQixTQUFTO0lBQ2pELE9BQU8sSUFBSUcsT0FBTztRQUNkSSxPQUFPLElBQUksQ0FBQ0ksTUFBTTtRQUNsQlAsUUFBUSxJQUFJLENBQUNRLE9BQU87UUFDcEJaLFdBQVdBO1FBQ1hRLFFBQVEsSUFBSSxDQUFDUSxPQUFPO1FBQ3BCakIsUUFBUSxJQUFJLENBQUNrQixPQUFPO0lBQ3hCO0FBQ0o7QUFFQWQsT0FBT2UsU0FBUyxDQUFDSSxTQUFTLEdBQUc7SUFDekIsT0FBTyxJQUFJLENBQUNWLE9BQU8sS0FBSyxhQUFhLElBQUksQ0FBQ0EsT0FBTyxLQUFLO0FBQzFEO0FBRUFULE9BQU9lLFNBQVMsQ0FBQ0ssU0FBUyxHQUFHO0lBQ3pCLE9BQU8sSUFBSSxDQUFDWCxPQUFPLEtBQUs7QUFDNUI7QUFFQVQsT0FBT2UsU0FBUyxDQUFDTSxPQUFPLEdBQUc7SUFDdkIsT0FBTyxJQUFJLENBQUNaLE9BQU8sS0FBSztBQUM1QjtBQUVBVCxPQUFPZSxTQUFTLENBQUNPLEtBQUssR0FBRztJQUNyQixPQUFPLElBQUksQ0FBQ2IsT0FBTyxLQUFLO0FBQzVCO0FBRUFULE9BQU9lLFNBQVMsQ0FBQ1gsS0FBSyxHQUFHO0lBQ3JCLE9BQU8sSUFBSSxDQUFDSSxNQUFNO0FBQ3RCO0FBRUFSLE9BQU9lLFNBQVMsQ0FBQ2xCLFNBQVMsR0FBRztJQUN6QixPQUFPLElBQUksQ0FBQ2UsVUFBVTtBQUMxQjtBQUVBWixPQUFPZSxTQUFTLENBQUNWLE1BQU0sR0FBRztJQUN0QixPQUFPLElBQUksQ0FBQ1EsT0FBTztBQUN2QjtBQUVBYixPQUFPZSxTQUFTLENBQUNuQixNQUFNLEdBQUc7SUFDdEIsT0FBTyxJQUFJLENBQUNrQixPQUFPO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdHNhLXBsYXRmb3JtLy4vbm9kZV9tb2R1bGVzL2xvcC9saWIvcGFyc2luZy1yZXN1bHRzLmpzPzk2MGUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgZmFpbHVyZTogZnVuY3Rpb24oZXJyb3JzLCByZW1haW5pbmcpIHtcbiAgICAgICAgaWYgKGVycm9ycy5sZW5ndGggPCAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsdXJlIG11c3QgaGF2ZSBlcnJvcnNcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBSZXN1bHQoe1xuICAgICAgICAgICAgc3RhdHVzOiBcImZhaWx1cmVcIixcbiAgICAgICAgICAgIHJlbWFpbmluZzogcmVtYWluaW5nLFxuICAgICAgICAgICAgZXJyb3JzOiBlcnJvcnNcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBlcnJvcjogZnVuY3Rpb24oZXJyb3JzLCByZW1haW5pbmcpIHtcbiAgICAgICAgaWYgKGVycm9ycy5sZW5ndGggPCAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsdXJlIG11c3QgaGF2ZSBlcnJvcnNcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBSZXN1bHQoe1xuICAgICAgICAgICAgc3RhdHVzOiBcImVycm9yXCIsXG4gICAgICAgICAgICByZW1haW5pbmc6IHJlbWFpbmluZyxcbiAgICAgICAgICAgIGVycm9yczogZXJyb3JzXG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgc3VjY2VzczogZnVuY3Rpb24odmFsdWUsIHJlbWFpbmluZywgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVzdWx0KHtcbiAgICAgICAgICAgIHN0YXR1czogXCJzdWNjZXNzXCIsXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgICAgICAgIHJlbWFpbmluZzogcmVtYWluaW5nLFxuICAgICAgICAgICAgZXJyb3JzOiBbXVxuICAgICAgICB9KTtcbiAgICB9LFxuICAgIGN1dDogZnVuY3Rpb24ocmVtYWluaW5nKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVzdWx0KHtcbiAgICAgICAgICAgIHN0YXR1czogXCJjdXRcIixcbiAgICAgICAgICAgIHJlbWFpbmluZzogcmVtYWluaW5nLFxuICAgICAgICAgICAgZXJyb3JzOiBbXVxuICAgICAgICB9KTtcbiAgICB9XG59O1xuXG52YXIgUmVzdWx0ID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHRoaXMuX3ZhbHVlID0gb3B0aW9ucy52YWx1ZTtcbiAgICB0aGlzLl9zdGF0dXMgPSBvcHRpb25zLnN0YXR1cztcbiAgICB0aGlzLl9oYXNWYWx1ZSA9IG9wdGlvbnMudmFsdWUgIT09IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9yZW1haW5pbmcgPSBvcHRpb25zLnJlbWFpbmluZztcbiAgICB0aGlzLl9zb3VyY2UgPSBvcHRpb25zLnNvdXJjZTtcbiAgICB0aGlzLl9lcnJvcnMgPSBvcHRpb25zLmVycm9ycztcbn07XG5cblJlc3VsdC5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24oZnVuYykge1xuICAgIGlmICh0aGlzLl9oYXNWYWx1ZSkge1xuICAgICAgICByZXR1cm4gbmV3IFJlc3VsdCh7XG4gICAgICAgICAgICB2YWx1ZTogZnVuYyh0aGlzLl92YWx1ZSwgdGhpcy5fc291cmNlKSxcbiAgICAgICAgICAgIHN0YXR1czogdGhpcy5fc3RhdHVzLFxuICAgICAgICAgICAgcmVtYWluaW5nOiB0aGlzLl9yZW1haW5pbmcsXG4gICAgICAgICAgICBzb3VyY2U6IHRoaXMuX3NvdXJjZSxcbiAgICAgICAgICAgIGVycm9yczogdGhpcy5fZXJyb3JzXG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn07XG5cblJlc3VsdC5wcm90b3R5cGUuY2hhbmdlUmVtYWluaW5nID0gZnVuY3Rpb24ocmVtYWluaW5nKSB7XG4gICAgcmV0dXJuIG5ldyBSZXN1bHQoe1xuICAgICAgICB2YWx1ZTogdGhpcy5fdmFsdWUsXG4gICAgICAgIHN0YXR1czogdGhpcy5fc3RhdHVzLFxuICAgICAgICByZW1haW5pbmc6IHJlbWFpbmluZyxcbiAgICAgICAgc291cmNlOiB0aGlzLl9zb3VyY2UsXG4gICAgICAgIGVycm9yczogdGhpcy5fZXJyb3JzXG4gICAgfSk7XG59O1xuXG5SZXN1bHQucHJvdG90eXBlLmlzU3VjY2VzcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9zdGF0dXMgPT09IFwic3VjY2Vzc1wiIHx8IHRoaXMuX3N0YXR1cyA9PT0gXCJjdXRcIjtcbn07XG5cblJlc3VsdC5wcm90b3R5cGUuaXNGYWlsdXJlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXR1cyA9PT0gXCJmYWlsdXJlXCI7XG59O1xuXG5SZXN1bHQucHJvdG90eXBlLmlzRXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhdHVzID09PSBcImVycm9yXCI7XG59O1xuXG5SZXN1bHQucHJvdG90eXBlLmlzQ3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXR1cyA9PT0gXCJjdXRcIjtcbn07XG5cblJlc3VsdC5wcm90b3R5cGUudmFsdWUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG59O1xuXG5SZXN1bHQucHJvdG90eXBlLnJlbWFpbmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9yZW1haW5pbmc7XG59O1xuXG5SZXN1bHQucHJvdG90eXBlLnNvdXJjZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9zb3VyY2U7XG59O1xuXG5SZXN1bHQucHJvdG90eXBlLmVycm9ycyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9lcnJvcnM7XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJmYWlsdXJlIiwiZXJyb3JzIiwicmVtYWluaW5nIiwibGVuZ3RoIiwiRXJyb3IiLCJSZXN1bHQiLCJzdGF0dXMiLCJlcnJvciIsInN1Y2Nlc3MiLCJ2YWx1ZSIsInNvdXJjZSIsImN1dCIsIm9wdGlvbnMiLCJfdmFsdWUiLCJfc3RhdHVzIiwiX2hhc1ZhbHVlIiwidW5kZWZpbmVkIiwiX3JlbWFpbmluZyIsIl9zb3VyY2UiLCJfZXJyb3JzIiwicHJvdG90eXBlIiwibWFwIiwiZnVuYyIsImNoYW5nZVJlbWFpbmluZyIsImlzU3VjY2VzcyIsImlzRmFpbHVyZSIsImlzRXJyb3IiLCJpc0N1dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lop/lib/parsing-results.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/lop/lib/regex-tokeniser.js":
/*!*************************************************!*\
  !*** ./node_modules/lop/lib/regex-tokeniser.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var Token = __webpack_require__(/*! ./Token */ \"(ssr)/./node_modules/lop/lib/Token.js\");\nvar StringSource = __webpack_require__(/*! ./StringSource */ \"(ssr)/./node_modules/lop/lib/StringSource.js\");\nexports.RegexTokeniser = RegexTokeniser;\nfunction RegexTokeniser(rules) {\n    rules = rules.map(function(rule) {\n        return {\n            name: rule.name,\n            regex: new RegExp(rule.regex.source, \"g\")\n        };\n    });\n    function tokenise(input, description) {\n        var source = new StringSource(input, description);\n        var index = 0;\n        var tokens = [];\n        while(index < input.length){\n            var result = readNextToken(input, index, source);\n            index = result.endIndex;\n            tokens.push(result.token);\n        }\n        tokens.push(endToken(input, source));\n        return tokens;\n    }\n    function readNextToken(string, startIndex, source) {\n        for(var i = 0; i < rules.length; i++){\n            var regex = rules[i].regex;\n            regex.lastIndex = startIndex;\n            var result = regex.exec(string);\n            if (result) {\n                var endIndex = startIndex + result[0].length;\n                if (result.index === startIndex && endIndex > startIndex) {\n                    var value = result[1];\n                    var token = new Token(rules[i].name, value, source.range(startIndex, endIndex));\n                    return {\n                        token: token,\n                        endIndex: endIndex\n                    };\n                }\n            }\n        }\n        var endIndex = startIndex + 1;\n        var token = new Token(\"unrecognisedCharacter\", string.substring(startIndex, endIndex), source.range(startIndex, endIndex));\n        return {\n            token: token,\n            endIndex: endIndex\n        };\n    }\n    function endToken(input, source) {\n        return new Token(\"end\", null, source.range(input.length, input.length));\n    }\n    return {\n        tokenise: tokenise\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbG9wL2xpYi9yZWdleC10b2tlbmlzZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsUUFBUUMsbUJBQU9BLENBQUMsc0RBQVM7QUFDN0IsSUFBSUMsZUFBZUQsbUJBQU9BLENBQUMsb0VBQWdCO0FBRTNDRSxzQkFBc0IsR0FBR0M7QUFFekIsU0FBU0EsZUFBZUMsS0FBSztJQUN6QkEsUUFBUUEsTUFBTUMsR0FBRyxDQUFDLFNBQVNDLElBQUk7UUFDM0IsT0FBTztZQUNIQyxNQUFNRCxLQUFLQyxJQUFJO1lBQ2ZDLE9BQU8sSUFBSUMsT0FBT0gsS0FBS0UsS0FBSyxDQUFDRSxNQUFNLEVBQUU7UUFDekM7SUFDSjtJQUVBLFNBQVNDLFNBQVNDLEtBQUssRUFBRUMsV0FBVztRQUNoQyxJQUFJSCxTQUFTLElBQUlULGFBQWFXLE9BQU9DO1FBQ3JDLElBQUlDLFFBQVE7UUFDWixJQUFJQyxTQUFTLEVBQUU7UUFFZixNQUFPRCxRQUFRRixNQUFNSSxNQUFNLENBQUU7WUFDekIsSUFBSUMsU0FBU0MsY0FBY04sT0FBT0UsT0FBT0o7WUFDekNJLFFBQVFHLE9BQU9FLFFBQVE7WUFDdkJKLE9BQU9LLElBQUksQ0FBQ0gsT0FBT0ksS0FBSztRQUM1QjtRQUVBTixPQUFPSyxJQUFJLENBQUNFLFNBQVNWLE9BQU9GO1FBQzVCLE9BQU9LO0lBQ1g7SUFFQSxTQUFTRyxjQUFjSyxNQUFNLEVBQUVDLFVBQVUsRUFBRWQsTUFBTTtRQUM3QyxJQUFLLElBQUllLElBQUksR0FBR0EsSUFBSXJCLE1BQU1ZLE1BQU0sRUFBRVMsSUFBSztZQUNuQyxJQUFJakIsUUFBUUosS0FBSyxDQUFDcUIsRUFBRSxDQUFDakIsS0FBSztZQUMxQkEsTUFBTWtCLFNBQVMsR0FBR0Y7WUFDbEIsSUFBSVAsU0FBU1QsTUFBTW1CLElBQUksQ0FBQ0o7WUFFeEIsSUFBSU4sUUFBUTtnQkFDUixJQUFJRSxXQUFXSyxhQUFhUCxNQUFNLENBQUMsRUFBRSxDQUFDRCxNQUFNO2dCQUM1QyxJQUFJQyxPQUFPSCxLQUFLLEtBQUtVLGNBQWNMLFdBQVdLLFlBQVk7b0JBQ3RELElBQUlJLFFBQVFYLE1BQU0sQ0FBQyxFQUFFO29CQUNyQixJQUFJSSxRQUFRLElBQUl0QixNQUNaSyxLQUFLLENBQUNxQixFQUFFLENBQUNsQixJQUFJLEVBQ2JxQixPQUNBbEIsT0FBT21CLEtBQUssQ0FBQ0wsWUFBWUw7b0JBRTdCLE9BQU87d0JBQUNFLE9BQU9BO3dCQUFPRixVQUFVQTtvQkFBUTtnQkFDNUM7WUFDSjtRQUNKO1FBQ0EsSUFBSUEsV0FBV0ssYUFBYTtRQUM1QixJQUFJSCxRQUFRLElBQUl0QixNQUNaLHlCQUNBd0IsT0FBT08sU0FBUyxDQUFDTixZQUFZTCxXQUM3QlQsT0FBT21CLEtBQUssQ0FBQ0wsWUFBWUw7UUFFN0IsT0FBTztZQUFDRSxPQUFPQTtZQUFPRixVQUFVQTtRQUFRO0lBQzVDO0lBRUEsU0FBU0csU0FBU1YsS0FBSyxFQUFFRixNQUFNO1FBQzNCLE9BQU8sSUFBSVgsTUFDUCxPQUNBLE1BQ0FXLE9BQU9tQixLQUFLLENBQUNqQixNQUFNSSxNQUFNLEVBQUVKLE1BQU1JLE1BQU07SUFFL0M7SUFFQSxPQUFPO1FBQ0hMLFVBQVVBO0lBQ2Q7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL3RzYS1wbGF0Zm9ybS8uL25vZGVfbW9kdWxlcy9sb3AvbGliL3JlZ2V4LXRva2VuaXNlci5qcz82NGJjIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBUb2tlbiA9IHJlcXVpcmUoXCIuL1Rva2VuXCIpO1xudmFyIFN0cmluZ1NvdXJjZSA9IHJlcXVpcmUoXCIuL1N0cmluZ1NvdXJjZVwiKTtcblxuZXhwb3J0cy5SZWdleFRva2VuaXNlciA9IFJlZ2V4VG9rZW5pc2VyO1xuXG5mdW5jdGlvbiBSZWdleFRva2VuaXNlcihydWxlcykge1xuICAgIHJ1bGVzID0gcnVsZXMubWFwKGZ1bmN0aW9uKHJ1bGUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6IHJ1bGUubmFtZSxcbiAgICAgICAgICAgIHJlZ2V4OiBuZXcgUmVnRXhwKHJ1bGUucmVnZXguc291cmNlLCBcImdcIilcbiAgICAgICAgfTtcbiAgICB9KTtcbiAgICBcbiAgICBmdW5jdGlvbiB0b2tlbmlzZShpbnB1dCwgZGVzY3JpcHRpb24pIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IG5ldyBTdHJpbmdTb3VyY2UoaW5wdXQsIGRlc2NyaXB0aW9uKTtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIHRva2VucyA9IFtdO1xuICAgIFxuICAgICAgICB3aGlsZSAoaW5kZXggPCBpbnB1dC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSByZWFkTmV4dFRva2VuKGlucHV0LCBpbmRleCwgc291cmNlKTtcbiAgICAgICAgICAgIGluZGV4ID0gcmVzdWx0LmVuZEluZGV4O1xuICAgICAgICAgICAgdG9rZW5zLnB1c2gocmVzdWx0LnRva2VuKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdG9rZW5zLnB1c2goZW5kVG9rZW4oaW5wdXQsIHNvdXJjZSkpO1xuICAgICAgICByZXR1cm4gdG9rZW5zO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlYWROZXh0VG9rZW4oc3RyaW5nLCBzdGFydEluZGV4LCBzb3VyY2UpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHJlZ2V4ID0gcnVsZXNbaV0ucmVnZXg7XG4gICAgICAgICAgICByZWdleC5sYXN0SW5kZXggPSBzdGFydEluZGV4O1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHJlZ2V4LmV4ZWMoc3RyaW5nKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHZhciBlbmRJbmRleCA9IHN0YXJ0SW5kZXggKyByZXN1bHRbMF0ubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuaW5kZXggPT09IHN0YXJ0SW5kZXggJiYgZW5kSW5kZXggPiBzdGFydEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdFsxXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRva2VuID0gbmV3IFRva2VuKFxuICAgICAgICAgICAgICAgICAgICAgICAgcnVsZXNbaV0ubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlLnJhbmdlKHN0YXJ0SW5kZXgsIGVuZEluZGV4KVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3Rva2VuOiB0b2tlbiwgZW5kSW5kZXg6IGVuZEluZGV4fTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVuZEluZGV4ID0gc3RhcnRJbmRleCArIDE7XG4gICAgICAgIHZhciB0b2tlbiA9IG5ldyBUb2tlbihcbiAgICAgICAgICAgIFwidW5yZWNvZ25pc2VkQ2hhcmFjdGVyXCIsXG4gICAgICAgICAgICBzdHJpbmcuc3Vic3RyaW5nKHN0YXJ0SW5kZXgsIGVuZEluZGV4KSxcbiAgICAgICAgICAgIHNvdXJjZS5yYW5nZShzdGFydEluZGV4LCBlbmRJbmRleClcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHt0b2tlbjogdG9rZW4sIGVuZEluZGV4OiBlbmRJbmRleH07XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIGVuZFRva2VuKGlucHV0LCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUb2tlbihcbiAgICAgICAgICAgIFwiZW5kXCIsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgc291cmNlLnJhbmdlKGlucHV0Lmxlbmd0aCwgaW5wdXQubGVuZ3RoKVxuICAgICAgICApO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgICB0b2tlbmlzZTogdG9rZW5pc2VcbiAgICB9XG59XG5cblxuIl0sIm5hbWVzIjpbIlRva2VuIiwicmVxdWlyZSIsIlN0cmluZ1NvdXJjZSIsImV4cG9ydHMiLCJSZWdleFRva2VuaXNlciIsInJ1bGVzIiwibWFwIiwicnVsZSIsIm5hbWUiLCJyZWdleCIsIlJlZ0V4cCIsInNvdXJjZSIsInRva2VuaXNlIiwiaW5wdXQiLCJkZXNjcmlwdGlvbiIsImluZGV4IiwidG9rZW5zIiwibGVuZ3RoIiwicmVzdWx0IiwicmVhZE5leHRUb2tlbiIsImVuZEluZGV4IiwicHVzaCIsInRva2VuIiwiZW5kVG9rZW4iLCJzdHJpbmciLCJzdGFydEluZGV4IiwiaSIsImxhc3RJbmRleCIsImV4ZWMiLCJ2YWx1ZSIsInJhbmdlIiwic3Vic3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lop/lib/regex-tokeniser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/lop/lib/rules.js":
/*!***************************************!*\
  !*** ./node_modules/lop/lib/rules.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var _ = __webpack_require__(/*! underscore */ \"(ssr)/./node_modules/underscore/modules/index-all.js\");\nvar options = __webpack_require__(/*! option */ \"(ssr)/./node_modules/option/index.js\");\nvar results = __webpack_require__(/*! ./parsing-results */ \"(ssr)/./node_modules/lop/lib/parsing-results.js\");\nvar errors = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/lop/lib/errors.js\");\nvar lazyIterators = __webpack_require__(/*! ./lazy-iterators */ \"(ssr)/./node_modules/lop/lib/lazy-iterators.js\");\nexports.token = function(tokenType, value) {\n    var matchValue = value !== undefined;\n    return function(input) {\n        var token = input.head();\n        if (token && token.name === tokenType && (!matchValue || token.value === value)) {\n            return results.success(token.value, input.tail(), token.source);\n        } else {\n            var expected = describeToken({\n                name: tokenType,\n                value: value\n            });\n            return describeTokenMismatch(input, expected);\n        }\n    };\n};\nexports.tokenOfType = function(tokenType) {\n    return exports.token(tokenType);\n};\nexports.firstOf = function(name, parsers) {\n    if (!_.isArray(parsers)) {\n        parsers = Array.prototype.slice.call(arguments, 1);\n    }\n    return function(input) {\n        return lazyIterators.fromArray(parsers).map(function(parser) {\n            return parser(input);\n        }).filter(function(result) {\n            return result.isSuccess() || result.isError();\n        }).first() || describeTokenMismatch(input, name);\n    };\n};\nexports.then = function(parser, func) {\n    return function(input) {\n        var result = parser(input);\n        if (!result.map) {\n            console.log(result);\n        }\n        return result.map(func);\n    };\n};\nexports.sequence = function() {\n    var parsers = Array.prototype.slice.call(arguments, 0);\n    var rule = function(input) {\n        var result = _.foldl(parsers, function(memo, parser) {\n            var result = memo.result;\n            var hasCut = memo.hasCut;\n            if (!result.isSuccess()) {\n                return {\n                    result: result,\n                    hasCut: hasCut\n                };\n            }\n            var subResult = parser(result.remaining());\n            if (subResult.isCut()) {\n                return {\n                    result: result,\n                    hasCut: true\n                };\n            } else if (subResult.isSuccess()) {\n                var values;\n                if (parser.isCaptured) {\n                    values = result.value().withValue(parser, subResult.value());\n                } else {\n                    values = result.value();\n                }\n                var remaining = subResult.remaining();\n                var source = input.to(remaining);\n                return {\n                    result: results.success(values, remaining, source),\n                    hasCut: hasCut\n                };\n            } else if (hasCut) {\n                return {\n                    result: results.error(subResult.errors(), subResult.remaining()),\n                    hasCut: hasCut\n                };\n            } else {\n                return {\n                    result: subResult,\n                    hasCut: hasCut\n                };\n            }\n        }, {\n            result: results.success(new SequenceValues(), input),\n            hasCut: false\n        }).result;\n        var source = input.to(result.remaining());\n        return result.map(function(values) {\n            return values.withValue(exports.sequence.source, source);\n        });\n    };\n    rule.head = function() {\n        var firstCapture = _.find(parsers, isCapturedRule);\n        return exports.then(rule, exports.sequence.extract(firstCapture));\n    };\n    rule.map = function(func) {\n        return exports.then(rule, function(result) {\n            return func.apply(this, result.toArray());\n        });\n    };\n    function isCapturedRule(subRule) {\n        return subRule.isCaptured;\n    }\n    return rule;\n};\nvar SequenceValues = function(values, valuesArray) {\n    this._values = values || {};\n    this._valuesArray = valuesArray || [];\n};\nSequenceValues.prototype.withValue = function(rule, value) {\n    if (rule.captureName && rule.captureName in this._values) {\n        throw new Error('Cannot add second value for capture \"' + rule.captureName + '\"');\n    } else {\n        var newValues = _.clone(this._values);\n        newValues[rule.captureName] = value;\n        var newValuesArray = this._valuesArray.concat([\n            value\n        ]);\n        return new SequenceValues(newValues, newValuesArray);\n    }\n};\nSequenceValues.prototype.get = function(rule) {\n    if (rule.captureName in this._values) {\n        return this._values[rule.captureName];\n    } else {\n        throw new Error('No value for capture \"' + rule.captureName + '\"');\n    }\n};\nSequenceValues.prototype.toArray = function() {\n    return this._valuesArray;\n};\nexports.sequence.capture = function(rule, name) {\n    var captureRule = function() {\n        return rule.apply(this, arguments);\n    };\n    captureRule.captureName = name;\n    captureRule.isCaptured = true;\n    return captureRule;\n};\nexports.sequence.extract = function(rule) {\n    return function(result) {\n        return result.get(rule);\n    };\n};\nexports.sequence.applyValues = function(func) {\n    // TODO: check captureName doesn't conflict with source or other captures\n    var rules = Array.prototype.slice.call(arguments, 1);\n    return function(result) {\n        var values = rules.map(function(rule) {\n            return result.get(rule);\n        });\n        return func.apply(this, values);\n    };\n};\nexports.sequence.source = {\n    captureName: \"☃source☃\"\n};\nexports.sequence.cut = function() {\n    return function(input) {\n        return results.cut(input);\n    };\n};\nexports.optional = function(rule) {\n    return function(input) {\n        var result = rule(input);\n        if (result.isSuccess()) {\n            return result.map(options.some);\n        } else if (result.isFailure()) {\n            return results.success(options.none, input);\n        } else {\n            return result;\n        }\n    };\n};\nexports.zeroOrMoreWithSeparator = function(rule, separator) {\n    return repeatedWithSeparator(rule, separator, false);\n};\nexports.oneOrMoreWithSeparator = function(rule, separator) {\n    return repeatedWithSeparator(rule, separator, true);\n};\nvar zeroOrMore = exports.zeroOrMore = function(rule) {\n    return function(input) {\n        var values = [];\n        var result;\n        while((result = rule(input)) && result.isSuccess()){\n            input = result.remaining();\n            values.push(result.value());\n        }\n        if (result.isError()) {\n            return result;\n        } else {\n            return results.success(values, input);\n        }\n    };\n};\nexports.oneOrMore = function(rule) {\n    return exports.oneOrMoreWithSeparator(rule, noOpRule);\n};\nfunction noOpRule(input) {\n    return results.success(null, input);\n}\nvar repeatedWithSeparator = function(rule, separator, isOneOrMore) {\n    return function(input) {\n        var result = rule(input);\n        if (result.isSuccess()) {\n            var mainRule = exports.sequence.capture(rule, \"main\");\n            var remainingRule = zeroOrMore(exports.then(exports.sequence(separator, mainRule), exports.sequence.extract(mainRule)));\n            var remainingResult = remainingRule(result.remaining());\n            return results.success([\n                result.value()\n            ].concat(remainingResult.value()), remainingResult.remaining());\n        } else if (isOneOrMore || result.isError()) {\n            return result;\n        } else {\n            return results.success([], input);\n        }\n    };\n};\nexports.leftAssociative = function(leftRule, rightRule, func) {\n    var rights;\n    if (func) {\n        rights = [\n            {\n                func: func,\n                rule: rightRule\n            }\n        ];\n    } else {\n        rights = rightRule;\n    }\n    rights = rights.map(function(right) {\n        return exports.then(right.rule, function(rightValue) {\n            return function(leftValue, source) {\n                return right.func(leftValue, rightValue, source);\n            };\n        });\n    });\n    var repeatedRule = exports.firstOf.apply(null, [\n        \"rules\"\n    ].concat(rights));\n    return function(input) {\n        var start = input;\n        var leftResult = leftRule(input);\n        if (!leftResult.isSuccess()) {\n            return leftResult;\n        }\n        var repeatedResult = repeatedRule(leftResult.remaining());\n        while(repeatedResult.isSuccess()){\n            var remaining = repeatedResult.remaining();\n            var source = start.to(repeatedResult.remaining());\n            var right = repeatedResult.value();\n            leftResult = results.success(right(leftResult.value(), source), remaining, source);\n            repeatedResult = repeatedRule(leftResult.remaining());\n        }\n        if (repeatedResult.isError()) {\n            return repeatedResult;\n        }\n        return leftResult;\n    };\n};\nexports.leftAssociative.firstOf = function() {\n    return Array.prototype.slice.call(arguments, 0);\n};\nexports.nonConsuming = function(rule) {\n    return function(input) {\n        return rule(input).changeRemaining(input);\n    };\n};\nvar describeToken = function(token) {\n    if (token.value) {\n        return token.name + ' \"' + token.value + '\"';\n    } else {\n        return token.name;\n    }\n};\nfunction describeTokenMismatch(input, expected) {\n    var error;\n    var token = input.head();\n    if (token) {\n        error = errors.error({\n            expected: expected,\n            actual: describeToken(token),\n            location: token.source\n        });\n    } else {\n        error = errors.error({\n            expected: expected,\n            actual: \"end of tokens\"\n        });\n    }\n    return results.failure([\n        error\n    ], input);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lop/lib/rules.js\n");

/***/ })

};
;